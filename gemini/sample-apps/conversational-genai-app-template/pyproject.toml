[tool.poetry]
name = "dummy-conversational-langchain"
version = "0.1.0"
description = ""
authors = ["Your Name <your@email.com>"]
packages = [
    { include = "app" },
]

[tool.poetry.dependencies]
python = "^3.10"
traceloop-sdk = "^0.30.1"
langchain-google-vertexai = "^2.0.0"
opentelemetry-exporter-gcp-trace = "^1.6.0"
opentelemetry-sdk = "^1.25.0"
google-cloud-logging = "^3.10.0"
langchain = "^0.3.0"
google-cloud-aiplatform = {extras = ["rapid-evaluation"], version = "^1.59.0"}
scikit-learn = "^1.5.0"
fastapi = "0.110.3"
langchain-google-community = {extras = ["vertexaisearch"], version = "^2.0.0"}
pypdf = "^4.3.1"
grpcio = "1.64.1"
langgraph = "^0.2.21"
uvicorn = {extras = ["standard"], version = "^0.30.5"}
immutabledict = "^4.2.0"
types-pyyaml = "^6.0.12.20240917"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
nest-asyncio = "^1.6.0"


[tool.poetry.group.streamlit]
optional = true

[tool.poetry.group.streamlit.dependencies]
streamlit = "^1.35.0"
streamlit-extras = "^0.4.3"
extra-streamlit-components = "^0.1.71"
streamlit-feedback = "^0.1.3"


[tool.poetry.group.jupyter]
optional = true

[tool.poetry.group.jupyter.dependencies]
jupyter = "^1.0.0"


[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"
mypy = "^1"
codespell = "^2.2.0"


[tool.ruff.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
]
[tool.ruff]
line-length = 105

[tool.mypy]
# Ensure functions have type annotations
disallow_untyped_defs = true

# Allow returning Any from functions with no return type specified
allow_untyped_calls = true

# Don't require type annotations for self or cls in methods
disallow_untyped_decorators = false

# Ignore missing imports
ignore_missing_imports = true

# Don't complain about missing return statements
warn_no_return = false

# Show error codes in error messages
show_error_codes = true

# Ensure all functions have return type annotations
warn_return_any = true


[tool.codespell]
ignore-words-list = "rouge"
skip = "./locust_env/*,poetry.lock"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = "."